// std/mod.d++

// Declare the sub-modules within the std directory
pub mod core;
pub mod io;
pub mod fs;
pub mod collections;
pub mod math;
pub mod net;
pub mod thread;
pub mod time;

// Re-export commonly used items from sub-modules for convenience
// This allows using `std::Option` instead of `std::core::Option` if needed,
// depending on how 'use' statements work in user code.
// Often, core items are implicitly available, but explicit re-export is clear.
pub use core::Option;
pub use core::Result;
pub use core::String; // Assuming 'string' keyword is an alias for std::core::String or &std::core::Str

// Re-export traits
pub use core::Copy;
pub use core::Clone;
pub use core::Debug;
pub use core::Display;
pub use core::Error; // Re-export the core Error trait

// Re-export common I/O items
pub use io::Read;
pub use io::Write;
pub use io::stdin;
pub use io::stdout;
pub use io::stderr;

// Re-export common collections
pub use collections::Vec;
pub use collections::HashMap;

// Re-export common networking types
pub use net::TcpStream;
pub use net::TcpListener;
pub use net::UdpSocket;

// Re-export common concurrency types
pub use thread::spawn;
pub use thread::JoinHandle;

// Re-export common time types
pub use time::Duration;
pub use time::Instant;

// Note: Specific elements might be re-exported directly (like `Option`),
// or entire modules (`pub mod math;`) allowing users to access `std::math::sin`.
// The structure above does both for common types and modules.